name: CI

on: pull_request

jobs:
  dbt-ci:
    name: Run dbt CI
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        python-version: ['3.12']

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v4

      # Configuração do Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Baixa as diferentes versões do Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Instalar o Poetry via pip
        run: pip install poetry

      - name: Instala as dependências
        run: poetry install

      - name: Load Environment Variables
        env:
          DB_HOST_PROD: ${{ secrets.DB_HOST_PROD }}
          DB_USER_PROD: ${{ secrets.DB_USER_PROD }}
          DB_PASS_PROD: ${{ secrets.DB_PASS_PROD }}
          DB_PORT_PROD: ${{ secrets.DB_PORT_PROD }}
          DB_NAME_PROD: ${{ secrets.DB_NAME_PROD }}
          DB_SCHEMA_PROD: ${{ secrets.DB_SCHEMA_PROD }}
          DB_THREADS_PROD: ${{ secrets.DB_THREADS_PROD }}
        run: |
          echo "DB_HOST_PROD=${{ secrets.DB_HOST_PROD }}" >> $GITHUB_ENV
          echo "DB_USER_PROD=${{ secrets.DB_USER_PROD }}" >> $GITHUB_ENV
          echo "DB_PASS_PROD=${{ secrets.DB_PASS_PROD }}" >> $GITHUB_ENV
          echo "DB_PORT_PROD=${{ secrets.DB_PORT_PROD }}" >> $GITHUB_ENV
          echo "DB_NAME_PROD=${{ secrets.DB_NAME_PROD }}" >> $GITHUB_ENV
          echo "DB_SCHEMA_PROD=${{ secrets.DB_SCHEMA_PROD }}" >> $GITHUB_ENV
          echo "DB_THREADS_PROD=${{ secrets.DB_THREADS_PROD }}" >> $GITHUB_ENV

      - name: Conferindo a conexão com o banco
        run: poetry run dbt debug

      - name: Conferindo erros de sintaxe SQL
        run: poetry run sqlfluff lint models
      
      - name: formatando erros SQL
        run: poetry run sqlfluff fix models
        
      - name: testando a aplicacao
        run: poetry run dbt test
      
